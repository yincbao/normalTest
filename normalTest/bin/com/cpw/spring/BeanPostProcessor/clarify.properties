目的： 了解spring beanpostProcessor 和beanFactoryPostProcessor

结论：继承BeanPostProcessor 需要实现after和before Initialization,这里不是指bean的初始化，bean的初始化此前已经完成了，
	可以改变bean的属性值，这里bean可以当正常对象使用了，annotation就是在这里实现的，after在before前面执行，lazy-init的（applicatoinContext 实例的话，要等到真正调用的时候才起效，beanFacotry无所谓反正lazy-init不生效）
	
	继承BeanFactoryPostProcessor，需要实现postProcessBeanFactory方法，到这里bean实际上还没有完成实例化过程，
	这里还只能在BeanDefiniation级别获取 bean的信息，（配置信息，）当然这里也能改变bean的配置信息，PropertyValues，这里改变是xml文件级别的改变，scope从singleton改为prototype也可以做到
	
	综上，可以看出两个接口的功能是调用时机是不一样的， beanPostProcessor要晚于BeanFactoryPostProcessor，
		前者是对对象的前置处理（init-method或者继承了InitializingBean 但是afterPropertiesSet方法没执行之前），还没有post给用户
		后者调度的时候，对象还是definition阶段呢，（仅比文件xml级别进步一点点）
		
		beanpostProcessor应用场景：
		spring 几个著名的注解都是通过 spring内置beanpostProcessor
				•org.springframework.context.annotation.CommonAnnotationBeanPostProcessor：支持@Resource注解的注入
				•org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor：支持@Required注解的注入
				•org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor：支持@Autowired注解的注入
				•org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor：支持@PersistenceUnit和@PersistenceContext注解的注入
				•org.springframework.context.support.ApplicationContextAwareProcessor：用来为bean注入ApplicationContext等容器对象
 
		
		beanFactoryPostProcessor应用场景  第一个必须想到placeholder
			•org.springframework.beans.factory.config.PropertyPlaceholderConfigurer
			•org.springframework.beans.factory.config.PropertyOverrideConfigurer
			•org.springframework.beans.factory.config.CustomEditorConfigurer：用来注册自定义的属性编辑器
			